\documentclass[10pt,a4paper]{article}

\usepackage[utf8]{inputenx}

\usepackage[colorlinks=true,urlcolor=blue]{hyperref}
\usepackage[english,ngerman]{babel}
\usepackage[babel]{csquotes}
\usepackage{soul}
  
\usepackage{Sweave}

\title{Analyzing enviroCar Data in R}

\author{
\href{elisadeva@gmail.com}{Elisabet Adeva}
\and
\href{mailto:edzer.pebesma@uni-muenster.de}{Edzer Pebesma}
\and
\href{mailto:d.nuest@52north.org}{Daniel Nüst}
}


\begin{document}
\SweaveOpts{concordance=TRUE}

% Modify figure width.
\setkeys{Gin}{width=0.5\textwidth}

\maketitle

\tableofcontents

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

\subsection{The enviroCar Platform}
enviroCar is an open platform for Citizen Science projects in the field of sustainable mobility. Citizens, scientists, traffic planners and industry collect and analyze car data and share their findings.

It’s simple, it’s easy, it’s fun - it’s open source! Access the car’s sensors with your Android smartphone and a Bluetooth OBD-II adapter. The free enviroCar app provides information about your car and your driving characteristics. By uploading the data to the enviroCar server you agree to publish it as anonymized open data. As a scientist or traffic expert, you access the data easily via the enviroCar website and use it to answer questions in the field of mobility and environment. Use ArcGIS online to tell the community about your projects and to share your ideas, insights and conclusions with people all over the world.

See \href{envirocar.org}{envirocar.org} for further details.

\hl{TODO: add statement about license of eC data and link to relevant website}


\hl{TODO: add enviroCar logo (locally from within package as pdf, see how it is done at https://github.com/edzer/trajectories/tree/master/vignettes}

This document is based on the document \enquote{} available at \href{http://rpubs.com/edzer/enviroCar}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Importing Data}

<<>>=
baseurl = "https://envirocar.org/api/stable/"
require(rgdal)
require(RCurl)
@

<<>>=
trackUrl <- paste0(baseurl, "tracks/59301d7c268d1b08a4a9e38b")
trackGeoJSON <- httpGET(trackUrl)
layer <- readOGR(trackGeoJSON, layer = "OGRGeoJSON", verbose=FALSE)
@

<<>>=
class(layer)
@

<<>>=
layer[1, ]
@

As we can see, the attribute contains id (point nr) and time (still as factor, not as POSIXt) and the measured values are still in a JSON string that needs to be parsed. For this, we wrote an import function that converts time, parses the JSON into measured value, and adds a units attribute to the sp object:

<<>>=
require(trajectories)
require(enviroCaR)
tracksCol <- importEnviroCar(baseurl, "5207d871e4b058cd3d669afe", ssl.verifypeer=FALSE)
@

<<fig=TRUE>>=
library(spacetime)
str(tracksCol[1]@tracks[[1]], 3)
plot(tracksCol[1]@tracks[[1]])
print(stplot(tracksCol))
@

<<fig=TRUE>>=
library(lattice)
library(spacetime)
trellis.par.set(sp.theme())
print(stplot(tracksCol, attr = "speed", lwd = 3, scales = list(draw = T)))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Adding a background map}
Using package ggmap, we can add a google map background (or other background):

<<>>=
bb = matrix(NA, 2, 2)
bb[2, ] = c(51.94, 51.985)
bb[1, ] = c(7.58, 7.67)
library(ggmap)
@


<<>>=
map4ao <- get_map(location = as.vector(bb))
@


<<fig=TRUE>>=
# maptype = 'satellite', scale=2, zoom=4) Read the attributes to pass them
# to grid.raster
bbMap <- attr(map4ao, "bb")
latCenter <- with(bbMap, ll.lat + ur.lat)/2
lonCenter <- with(bbMap, ll.lon + ur.lon)/2
height <- with(bbMap, ur.lat - ll.lat)
width <- with(bbMap, ur.lon - ll.lon)
## Another component of the sp.layout in spplot
sp.raster <- list("grid.raster", map4ao, x = lonCenter, y = latCenter, width = width, 
    height = height, default.units = "native")
print(stplot(tracksCol, scales = list(draw = TRUE), sp.layout = sp.raster, 
    col = "red", lwd = 2, main = "google map background"))
@

<<fig=TRUE>>=
sp <- as(tracksCol, "SpatialPointsDataFrame")
print(spplot(sp, "Consumption", colorkey=T))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Generalizing a trajectory}
We can generalize a trajectory using Douglas-Peuker by using gSimplify in rgeos:
<<>>=
sl = as(tracksCol, "SpatialLines")
library(rgeos)
@

<<fig=TRUE>>=
plot(gSimplify(sl, 5e-04), axes = TRUE)  # WRONG: rgeos takes lat/long as Euclidian coords
plot(sp, add = T, col = "red")
title("generalization in Long/Lat (wrong!)")
@
however, without warning this falsely assumes that coordinates are metric, i.e. in a Euclidian system. They are not:
<<>>=
proj4string(sp)
@
How can we resolve this?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Reprojecting data to UTM}

Package rgdal contains code to reproject data:

<<>>=
library(rgdal)
utm = CRS("+proj=utm +zone=32 +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
slT = spTransform(sl, utm)
@

<<fig=TRUE>>=
plot(gSimplify(slT, 55), axes = TRUE)  # RIGHT: rgeos takes coords Euclidian
plot(spTransform(sp, utm), add = T, col = "red")
title("generalization in UTM zone 32N")
@

A plot of the (projected) simplified trajectory, here represented by a set of selected points, is created by 1. conversion to lines, 2. simplifying the line, 3. conversion to points, 4. matching to the full set of points, and 5. selection:

<<>>=
sl.simplified = gSimplify(slT, 55)  # 2
sp.simplified = as(sl.simplified, "SpatialPoints")  # 3
sp = spTransform(sp, utm)
sel = zerodist2(sp.simplified, sp, 0.001)[, 2]  # 4
sp.selected = sp[sel, ]  # 5
length(sp.selected)
@

<<>>=
sp.selected[1:3, ]
@

<<fig=TRUE>>=
print(spplot(sp.selected, "Consumption", colorkey = TRUE, main = "selected points according to Douglas-Peuker"))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Interpolating a point sequence}
Here, we interpolate the point measurements to a new set of points, using inverse distance weighting

<<>>=
n = length(sp) * 5  # create 5 points between each observation...
cc = coordinates(sp)
newx = approx(cc[, 1], n = n)$y  # along x,
newy = approx(cc[, 2], n = n)$y  # along y,
crs = CRS(proj4string(sp))
newpts = SpatialPoints(cbind(newx, newy), crs)
# Alternatively: convert to SpatialLines, then use spsample
library(gstat)
# interpolate Consumption values:
idw = idw(Consumption ~ 1, sp, newpts)
@
We can plot this sequence by

<<fig=TRUE>>=
print(spplot(idw[1], colorkey = TRUE, scales = list(draw = TRUE), main = "inverse distance interpolated Fuel Consumption values"))
@
Here, the new points are evenly distributed between all existing points, meaning that with 5 times as much points, between every two points 4 points are added equidistant. This gives a new point density that resembles the original point density.

Alternatively, we could generate interpolation points globally equispaced (e.g. by using spsample over a line, type = “regular”) equidistant in time, by taking time of measurement into account


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Aggregation of trajectory data: spatial}

We can aggregate to a 5 x 5 grid, using an arbitray aggregation function, here max
<<>>=
bb = bbox(sp)
grd = GridTopology(bb[, 1], apply(bb, 1, diff)/5, c(5, 5))
sp.agg = aggregate(sp[,-1], SpatialGrid(grd, crs), max)
@
and show the results, for 

<<fig=TRUE>>=
print(spplot(sp.agg[c("Rpm", "Speed", "CO2", "Consumption")], colorkey = TRUE, sp.layout = list("sp.points", sp, 
    col = 3), main = "maximum measured value per grid cell"))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Aggregation: temporal}
When looking at temporal variability, we see that for this trajectory the values are very unequally distrubed, indicating a break in the trajectory

<<fig=TRUE>>=
plot(y = sp$Consumption, x = sp$time, 
     main="Fuel consumption over time")
@

We can also aggregate to time intervals, e.g. 10 min values. For this, we will convert the points to a zoo object (time series)

<<fig=TRUE>>=
library(zoo)
xx = zoo(sp$Consumption, sp$time)
plot(aggregate(xx, cut(sp$time, "5 min"), mean))
points(xx)
title("10-minute mean Consumption (l/h)")
@

After having played with spatial objects (package sp) and temporal objects (package zoo), we can convert these data into spatio-temporal objects (package spacetime):

<<fig=TRUE>>=
library(spacetime)
stidf = as(tracksCol, "STIDF")
print(stplot(geometry(stidf), main = "trajectory points, cut in 6 time slices with equal amount of points"))
@

plots the geometry of the spatial points, over time, cutting time in six parts with an equal number of observations.

\end{document}
